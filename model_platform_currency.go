/*
Total API Reference

Este contrato se usara para generar los clientes con todos los servicios necesarios.  `!Uso exclusivo interno!`               --- 

API version: 0.0.1
Contact: support@brand4impact.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package brand4impact

import (
	"encoding/json"
)

// PlatformCurrency struct for PlatformCurrency
type PlatformCurrency struct {
	Name *string `json:"name,omitempty"`
	Code *string `json:"code,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
}

// NewPlatformCurrency instantiates a new PlatformCurrency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlatformCurrency() *PlatformCurrency {
	this := PlatformCurrency{}
	return &this
}

// NewPlatformCurrencyWithDefaults instantiates a new PlatformCurrency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlatformCurrencyWithDefaults() *PlatformCurrency {
	this := PlatformCurrency{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PlatformCurrency) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlatformCurrency) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PlatformCurrency) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PlatformCurrency) SetName(v string) {
	o.Name = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PlatformCurrency) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlatformCurrency) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PlatformCurrency) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *PlatformCurrency) SetCode(v string) {
	o.Code = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *PlatformCurrency) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlatformCurrency) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *PlatformCurrency) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *PlatformCurrency) SetSymbol(v string) {
	o.Symbol = &v
}

func (o PlatformCurrency) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	return json.Marshal(toSerialize)
}

type NullablePlatformCurrency struct {
	value *PlatformCurrency
	isSet bool
}

func (v NullablePlatformCurrency) Get() *PlatformCurrency {
	return v.value
}

func (v *NullablePlatformCurrency) Set(val *PlatformCurrency) {
	v.value = val
	v.isSet = true
}

func (v NullablePlatformCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullablePlatformCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlatformCurrency(val *PlatformCurrency) *NullablePlatformCurrency {
	return &NullablePlatformCurrency{value: val, isSet: true}
}

func (v NullablePlatformCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlatformCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


